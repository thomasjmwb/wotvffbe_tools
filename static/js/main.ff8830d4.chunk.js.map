{"version":3,"sources":["components/unit.js","components/toggle-filter-button.js","services/unit-service.js","App.js","serviceWorker.js","index.js"],"names":["percentage","number","Unit","unit","className","width","src","img","alt","name","elementType","attackType","fire","ice","wind","earth","lightning","water","light","dark","slash","pierce","strike","projectile","magic","filterProperty","filterValue","click","active","onClick","e","units","this","getUnits","Promise","resolve","fetch","then","response","json","unitJson","toggleFilter","unitFilterProperty","filter","map","text","toLowerCase","includes","resistancesFilter","greaterThan","some","resistanceName","filterPropertyToFunctionMap","indexOf","elementTypes","rarities","elementResistances","elementWeaknesses","attackResistances","attackWeaknesses","attackTypes","filterUnits","filtersList","Object","keys","forEach","length","push","every","filterFunction","todos","filtersTemplate","App","useState","filters","setFilters","setUnits","useEffect","UnitService","filteredUnits","toggleFilters","filtersCopy","JSON","parse","stringify","valueIndex","splice","element","key","rarity","slice","placeholder","onChange","applyNameFilter","target","value","type","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff8830d4.chunk.js","sourcesContent":["import React from \"react\";\r\nconst percentage = function(number) {\r\n  return number ? number * 100 : 0;\r\n};\r\nexport default function Unit({ unit }) {\r\n  return (\r\n    <div className=\"unit\">\r\n      <img className=\"img\" width=\"100\" src={unit.img} alt={unit.name} />\r\n      <div className=\"info\">\r\n        <div className=\"head\">\r\n          <span className=\"name capitalize\">{unit.name}</span> -{\" \"}\r\n          <span className=\"capitalize\">{unit.elementType}</span> -\r\n          <span className=\"capitalize\">{unit.attackType}</span>\r\n        </div>\r\n        <div className=\"body\">\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th>Fire</th>\r\n                <th>Ice</th>\r\n                <th>Wind</th>\r\n                <th>Earth</th>\r\n                <th>Lightning</th>\r\n                <th>Water</th>\r\n                <th>Light</th>\r\n                <th>Dark</th>\r\n              </tr>\r\n              <tr>\r\n                <td>{percentage(unit.fire)}%</td>\r\n                <td>{percentage(unit.ice)}%</td>\r\n                <td>{percentage(unit.wind)}%</td>\r\n                <td>{percentage(unit.earth)}%</td>\r\n                <td>{percentage(unit.lightning)}%</td>\r\n                <td>{percentage(unit.water)}%</td>\r\n                <td>{percentage(unit.light)}%</td>\r\n                <td>{percentage(unit.dark)}%</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th>Slash</th>\r\n                <th>Pierce</th>\r\n                <th>Strike</th>\r\n                <th>Projectile</th>\r\n                <th>Magic</th>\r\n              </tr>\r\n              <tr>\r\n                <td>{percentage(unit.slash)}%</td>\r\n                <td>{percentage(unit.pierce)}%</td>\r\n                <td>{percentage(unit.strike)}%</td>\r\n                <td>{percentage(unit.projectile)}%</td>\r\n                <td>{percentage(unit.magic)}%</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// {\r\n//     \"name\": \"Mediena\",\r\n//     \"img\": \"imgs/units/mediena.jpeg\",\r\n//     \"tier\": \"S\",\r\n//     \"rarity\": \"Ultra Rare\",\r\n//     \"unitLink\": \"http://wotvffbe.gamea.co/c/v89gxxuy\",\r\n//     \"imgSrc\": \"http://wotvffbe.gamea.co/file/imgbank/fm874m0k/uvovm3qz/5bc282b5d3f84663314acfd4448559659fd1c4bb_s.jpg\",\r\n//     \"imgFileName\": \"mediena.jpeg\",\r\n//     \"slash\": -0.2,\r\n//     \"pierce\": -0.2,\r\n//     \"strike\": -0.2,\r\n//     \"projectile\": -0.2,\r\n//     \"magic\": 0.25,\r\n//     \"fire\": -0.1,\r\n//     \"ice\": 0,\r\n//     \"wind\": 0.2,\r\n//     \"earth\": 0,\r\n//     \"undefined\": 0,\r\n//     \"lightning\": -0.1,\r\n//     \"water\": 0,\r\n//     \"light\": 0.2,\r\n//     \"dark\": 0,\r\n//     \"elementType\": \"ice\",\r\n//     \"attackType\": \"strike\"\r\n//   },\r\n","import React from \"react\";\r\n\r\nexport default function({ filterProperty, filterValue, click, active }) {\r\n  return (\r\n    <button\r\n      className={active ? \"active\" : \"\"}\r\n      onClick={e => click({ filterProperty, filterValue })}\r\n    >\r\n      {filterValue}\r\n    </button>\r\n  );\r\n}\r\n","// todo:this wont return a singleton?\r\nfunction UnitService() {\r\n  // return units list\r\n  let units = null;\r\n  this.getUnits = function() {\r\n    if (units) {\r\n      return Promise.resolve(units);\r\n    }\r\n    return fetch(\"./mock-data/units.json\")\r\n      .then(response => response.json())\r\n      .then(unitJson => {\r\n        units = unitJson;\r\n        return units;\r\n      });\r\n  };\r\n\r\n  const nameFilter = (unit, filter) => {\r\n    return unit.name.toLowerCase().indexOf(filter.name.toLowerCase()) > -1;\r\n  };\r\n  const toggleFilter = (filterProperty, unitFilterProperty) => (\r\n    unit,\r\n    filter\r\n  ) => {\r\n    return filter[filterProperty]\r\n      .map(text => text.toLowerCase())\r\n      .includes(unit[unitFilterProperty].toLowerCase());\r\n  };\r\n  const resistancesFilter = (filterProperty, greaterThan) => (unit, filter) => {\r\n    return filter[filterProperty].some(resistanceName => {\r\n      return greaterThan\r\n        ? unit[resistanceName.toLowerCase()] > 0\r\n        : unit[resistanceName.toLowerCase()] < 0;\r\n    });\r\n  };\r\n  const filterPropertyToFunctionMap = {\r\n    name: nameFilter,\r\n    elementTypes: toggleFilter(\"elementTypes\", \"elementType\"),\r\n    rarities: toggleFilter(\"rarities\", \"rarity\"),\r\n    elementResistances: resistancesFilter(\"elementResistances\", true),\r\n    elementWeaknesses: resistancesFilter(\"elementResistances\", false),\r\n    attackResistances: resistancesFilter(\"attackResistances\", true),\r\n    attackWeaknesses: resistancesFilter(\"attackWeaknesses\", false),\r\n    attackTypes: toggleFilter(\"attackTypes\", \"attackType\")\r\n  };\r\n  // return units list\r\n  // filterable by name, rarity, element, resistances,\r\n\r\n  this.filterUnits = function(filter) {\r\n    const filtersList = [];\r\n    Object.keys(filter).forEach(filterProperty => {\r\n      if (Object.keys(filter[filterProperty]).length > 0) {\r\n        // works for objects, arrays, strings\r\n        filtersList.push(filterPropertyToFunctionMap[filterProperty]);\r\n      }\r\n    });\r\n    return this.getUnits().then(units => {\r\n      return units.filter(unit => {\r\n        return filtersList.every(filterFunction => {\r\n          return filterFunction(unit, filter);\r\n        });\r\n      });\r\n    });\r\n  };\r\n  return this;\r\n}\r\nexport default new UnitService();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Unit from \"./components/unit\";\r\nimport ToggleFilterButton from \"./components/toggle-filter-button\";\r\nimport \"./App.css\";\r\nimport UnitService from \"./services/unit-service\";\r\nconst todos = [\r\n  \"Fix any incorrect unit data\",\r\n  \"Add ability to put your own composition of units in, show total resistances etc\",\r\n  \"Composition helper\",\r\n  \"Composition counter tool\",\r\n  \"improve mobile experience\"\r\n];\r\nconst filtersTemplate = {\r\n  elementTypes: [],\r\n  elementResistances: [],\r\n  name: \"\",\r\n  rarities: [],\r\n  attackResistances: [],\r\n  attackTypes: []\r\n};\r\nfunction App() {\r\n  const [filters, setFilters] = useState(filtersTemplate);\r\n  const [units, setUnits] = useState([]);\r\n  useEffect(() => {\r\n    UnitService.filterUnits(filters).then(filteredUnits => {\r\n      setUnits(filteredUnits);\r\n    });\r\n  }, [filters]);\r\n\r\n  const toggleFilters = function({ filterProperty, filterValue }) {\r\n    const filtersCopy = JSON.parse(JSON.stringify(filters));\r\n    const filterActive = filters[filterProperty].includes(filterValue);\r\n    if (filterActive) {\r\n      const valueIndex = filtersCopy[filterProperty].indexOf(filterValue);\r\n      filtersCopy[filterProperty].splice(valueIndex, 1);\r\n    } else {\r\n      filtersCopy[filterProperty].push(filterValue);\r\n    }\r\n    setFilters(filtersCopy);\r\n  };\r\n  const applyNameFilter = function(text) {\r\n    const filtersCopy = JSON.parse(JSON.stringify(filters));\r\n    filtersCopy.name = text;\r\n    setFilters(filtersCopy);\r\n  };\r\n\r\n  const elementTypes = [\r\n    \"Fire\",\r\n    \"Ice\",\r\n    \"Wind\",\r\n    \"Earth\",\r\n    \"Lightning\",\r\n    \"Water\",\r\n    \"Light\",\r\n    \"Dark\"\r\n  ];\r\n  const attackTypes = [\"Slash\", \"Pierce\", \"Strike\", \"Projectile\", \"Magic\"];\r\n  const rarityTypes = [\"Ultra Rare\", \"Mega Rare\"];\r\n  // const units = [{ name: \"test\" }];\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">WotVFFBE tools</header>\r\n      <div className=\"tier-1\">\r\n        <div className=\"filters\">\r\n          <h3>Filters</h3>\r\n          <div className=\"filter-cat elementTypes\">\r\n            <label>Element</label>\r\n            <div className=\"filter-options\">\r\n              {elementTypes.map(element => (\r\n                <ToggleFilterButton\r\n                  key={element}\r\n                  filterProperty=\"elementTypes\"\r\n                  filterValue={element}\r\n                  active={filters.elementTypes.includes(element)}\r\n                  click={toggleFilters}\r\n                ></ToggleFilterButton>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-cat rarities\">\r\n            <label>Raririty</label>\r\n            <div className=\"filter-options\">\r\n              {rarityTypes.map(rarity => (\r\n                <ToggleFilterButton\r\n                  key={rarity}\r\n                  filterProperty=\"rarities\"\r\n                  filterValue={rarity}\r\n                  active={filters.rarities.includes(rarity)}\r\n                  click={toggleFilters}\r\n                ></ToggleFilterButton>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-cat elementResistances\">\r\n            <label>Element Resistances</label>\r\n            <div className=\"filter-options\">\r\n              {elementTypes.map(element => (\r\n                <ToggleFilterButton\r\n                  key={element}\r\n                  filterProperty=\"elementResistances\"\r\n                  filterValue={element}\r\n                  active={filters.elementResistances.includes(element)}\r\n                  click={toggleFilters}\r\n                ></ToggleFilterButton>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-cat attackTypes\">\r\n            <label>Attack Type</label>\r\n            <div className=\"filter-options\">\r\n              {// slice out magic, its not an attack type on any units by default but it is an attack type weakness\r\n              attackTypes.slice(0, 4).map(element => (\r\n                <ToggleFilterButton\r\n                  key={element}\r\n                  filterProperty=\"attackTypes\"\r\n                  filterValue={element}\r\n                  active={filters.attackTypes.includes(element)}\r\n                  click={toggleFilters}\r\n                ></ToggleFilterButton>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-cat name\">\r\n            <label>Name</label>\r\n            <div className=\"filter-options\">\r\n              <input\r\n                placeholder=\"name\"\r\n                onChange={e => {\r\n                  applyNameFilter(e.target.value);\r\n                }}\r\n                type=\"text\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"notes\">\r\n          <h3>Todo:</h3>\r\n          <ul>\r\n            {todos.map((text, i) => (\r\n              <li key={i}>{text}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div>Count: {units.length}</div>\r\n      <div className=\"units-list\">\r\n        {units.map(unit => {\r\n          return <Unit unit={unit} key={unit.name}></Unit>;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}